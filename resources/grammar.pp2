
/**
 * -----------------------------------------------------------------------------
 *  Language Syntax Summary
 * -----------------------------------------------------------------------------
 */

%include grammar/lexemes                    // Lexeme/Token definitions
%include grammar/literals                   // Literal definitions
%include grammar/common                     // Common utils

%include grammar/type/template-params       // Type's template params
%include grammar/type/shape-fields          // Type's shape fields
%include grammar/type/callable              // Callable/function definitions
%include grammar/type/named-type            // Named type definition containing
                                            // template params and shape fields

%include grammar/definition/template-params
%include grammar/definition/type

%pragma root Document

#Document
  : DefinitionStatement()+
  ;

DefinitionStatement
  : (TypeDefinition())
    ::T_SEMICOLON::
  ;

/**
 * -----------------------------------------------------------------------------
 *  Type Statement
 * -----------------------------------------------------------------------------
 *
 *  Constant references to external definitions or
 *  describe the type in some way.
 *
 */

#Type
  : LogicalType()
  ;

/**
 * -----------------------------------------------------------------------------
 *  Logical Statements
 * -----------------------------------------------------------------------------
 *
 *  Logical statements denote union or intersection types, like:
 *  - A | B | C - for union type references.
 *  - A & B & C - for intersection type references.
 *
 */

LogicalType
  : UnionType()
  ;

UnionType -> {
    if (\count($children) === 2) {
        return new Node\Type\UnionTypeNode($children[0], $children[1]);
    }

    return $children;
}
  : IntersectionType() (::T_OR:: UnionType())?
  ;

IntersectionType -> {
    if (\count($children) === 2) {
        return new Node\Type\IntersectionTypeNode($children[0], $children[1]);
    }

    return $children;
}
  : UnaryType() (::T_AMP:: IntersectionType())?
  ;

/**
 * -----------------------------------------------------------------------------
 *  Unary Statements
 * -----------------------------------------------------------------------------
 *
 *  Unary statements denote terminal types, like:
 *  - A - for type reference.
 *  - ?A - for nullable type reference.
 *  - 'some' - for string literal reference.
 *  - etc...
 *
 */

UnaryType
  : PrefixedNullableType()
  ;

// stmt = ?Type
PrefixedNullableType -> {
    if (\is_array($children)) {
        return new Node\Type\NullableTypeNode($children[1]);
    }

    return $children;
}
  : <T_NULLABLE> TypesList()
  | SuffixedNullableType()
  ;

// stmt = Type?
SuffixedNullableType -> {
    if (\count($children) > 1) {
        $result = new Node\Type\NullableTypeNode($children[0]);
        $result->offset = $children[1]->getOffset();

        return $result;
    }

    return $children[0];
}
  : TypesList() <T_NULLABLE>?
  ;

TypesList -> {
    $statement = \array_shift($children);

    for ($i = 0, $length = \count($children); $i < $length; ++$i) {
        $statement = new Node\Type\TypesListNode($statement);
        $statement->offset = $children[$i]->getOffset();
    }

    return $statement;
}
  : PrimaryType() (
      <T_SQUARE_BRACKET_OPEN>
      ::T_SQUARE_BRACKET_CLOSE::
    )*
  ;

PrimaryType
  : ::T_PARENTHESIS_OPEN:: Type() ::T_PARENTHESIS_CLOSE::
  | Literal()
  | CallableType()
  | NamedType()
  ;
