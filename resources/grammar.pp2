
/**
 * -----------------------------------------------------------------------------
 *  Language Syntax Summary
 * -----------------------------------------------------------------------------
 */

%include grammar/lexemes
%include grammar/literals
%include grammar/template
%include grammar/shape
%include grammar/common
%include grammar/callable
%include grammar/typedef

%pragma root Statement

/**
 * -----------------------------------------------------------------------------
 *  Constant Statement
 * -----------------------------------------------------------------------------
 *
 *  A constant statement can be evaluated during translation rather than
 *  runtime, and accordingly may be used in any place that a constant may be.
 *
 */

Statement
  : BinaryStatement()
  ;

// Binary statements/expressions

BinaryStatement
  : UnionTypeStatement()
  ;

UnionTypeStatement -> {
    if (\count($children) === 2) {
        return new Node\Stmt\UnionTypeNode($children[0], $children[1]);
    }

    return $children;
}
  : IntersectionTypeStatement() (::T_OR:: UnionTypeStatement())?
  ;

IntersectionTypeStatement -> {
    if (\count($children) === 2) {
        return new Node\Stmt\IntersectionTypeNode($children[0], $children[1]);
    }

    return $children;
}
  : UnaryStatement() (::T_AND:: IntersectionTypeStatement())?
  ;

// Unary statements/expressions

UnaryStatement
  : PrefixedNullableTypeStatement()
  ;

// stmt = ?Type
PrefixedNullableTypeStatement -> {
    if (\is_array($children)) {
        return new Node\Stmt\NullableTypeNode($children[1]);
    }

    return $children;
}
  : <T_NULLABLE> TypesListStatement()
  | SuffixedNullableTypeStatement()
  ;

// stmt = Type?
SuffixedNullableTypeStatement -> {
    if (\count($children) > 1) {
        $result = new Node\Stmt\NullableTypeNode($children[0]);
        $result->offset = $children[1]->getOffset();

        return $result;
    }

    return $children[0];
}
  : TypesListStatement() <T_NULLABLE>?
  ;

TypesListStatement -> {
    $statement = \array_shift($children);

    for ($i = 0, $length = \count($children); $i < $length; ++$i) {
        $statement = new Node\Stmt\TypesListNode($statement);
        $statement->offset = $children[$i]->getOffset();
    }

    return $statement;
}
  : PrimaryStatement() (
      <T_SQUARE_BRACKET_OPEN>
      ::T_SQUARE_BRACKET_CLOSE::
    )*
  ;

// Primary

PrimaryStatement
  : ::T_PARENTHESIS_OPEN:: Statement() ::T_PARENTHESIS_CLOSE::
  | Literal()
  | CallableTypeStmt()
  | NamedTypeStmt()
  ;



