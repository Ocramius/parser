
ShapeFields -> {
    if ($children === []) {
        return new Node\Type\Shape\FieldsListNode();
    }

    if (!$children[0] instanceof \ArrayObject) {
        return new Node\Type\Shape\FieldsListNode([], false);
    }

    return new Node\Type\Shape\FieldsListNode(
        $children[0]->getArrayCopy(),
        \count($children) !== 2,
    );
}
  : ::T_BRACE_OPEN::
      (
        (ShapeFieldsList() (::T_COMMA:: <T_ELLIPSIS>)?)
        | <T_ELLIPSIS>?
      )
      ::T_COMMA::?
    ::T_BRACE_CLOSE::
  ;

ShapeFieldsList -> {
    $explicit = [];
    $implicit = false;

    foreach ($children as $field) {
        if ($field instanceof Node\Type\Shape\ExplicitFieldNode) {
            $identifier = $field->getIdentifier();

            if (\in_array($identifier, $explicit, true)) {
                throw new SemanticException(
                    \sprintf('Duplicate key "%s"', $identifier),
                    $field->offset,
                    SemanticException::CODE_SHAPE_KEY_DUPLICATION,
                );
            }

            $explicit[] = $identifier;
        } else {
            $implicit = true;
        }
    }

    if ($explicit !== [] && $implicit) {
        throw new SemanticException(
            \sprintf('Cannot mix explicit and implicit shape keys', $identifier),
            $offset,
            SemanticException::CODE_SHAPE_KEY_MIX,
        );
    }

    return new \ArrayObject($children);
}
  : ShapeField() (::T_COMMA:: ShapeField())*
  ;

ShapeField
  : ExplicitField()
  | ImplicitField()
  ;

ExplicitField -> {
    $name = $children[0];
    $value = \array_pop($children);

    // In case of "nullable" suffix defined
    $optional = \count($children) === 2;

    return match (true) {
        $name instanceof Node\Literal\IntLiteralNode
            => new Node\Type\Shape\NumericFieldNode($name, $value, $optional),
        $name instanceof Node\Literal\StringLiteralNode
            => new Node\Type\Shape\StringNamedFieldNode($name, $value, $optional),
        default => new Node\Type\Shape\NamedFieldNode($name, $value, $optional),
    };
}
  : ShapeKey() (<T_NULLABLE>)? ::T_COLON:: ShapeValue()
  ;

ImplicitField -> {
    return new Node\Type\Shape\FieldNode($children[0]);
}
  : ShapeValue()
  ;

ShapeKey
  : Identifier()
  | IntLiteral()
  | StringLiteral()
  ;

ShapeValue
  : Type()
  ;
