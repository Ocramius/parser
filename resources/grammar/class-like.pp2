
InterfaceDefinition -> {
    $implements = $parameters = $methods = null;

    if (\end($children) instanceof Node\Stmt\Callable\MethodsListNode) {
        $methods = \array_pop($children);
    }

    if (\end($children) instanceof Node\Stmt\ClassLike\InterfaceImplementsNode) {
        $implements = \array_pop($children);
    }

    if (\end($children) instanceof Node\Stmt\Template\ParametersListNode) {
        $parameters = \array_pop($children);
    }

    return new Node\Stmt\ClassLike\InterfaceDefinitionNode(
        $children[0],
        $parameters,
        $methods,
        $implements,
    );
}
  : ::T_INTERFACE:: Identifier()
    TemplateParameterDefinitions()?
    InterfaceExtends()?
    (ClassLikeEmptyBody() | ClassLikeBody())
  ;

TraitDefinition -> {
    $parameters = $methods = null;

    if (\end($children) instanceof Node\Stmt\Callable\MethodsListNode) {
        $methods = \array_pop($children);
    }

    if (\end($children) instanceof Node\Stmt\Template\ParametersListNode) {
        $parameters = \array_pop($children);
    }

    return new Node\Stmt\ClassLike\TraitDefinitionNode(
        $children[0],
        $parameters,
        $methods,
    );
}
  : ::T_TRAIT:: Identifier()
    TemplateParameterDefinitions()?
    (ClassLikeEmptyBody() | ClassLikeBody())
  ;

ClassDefinition -> {
    $extends = $implements = $parameters = $methods = null;

    if (\end($children) instanceof Node\Stmt\Callable\MethodsListNode) {
        $methods = \array_pop($children);
    }

    if (\end($children) instanceof Node\Stmt\ClassLike\InterfaceImplementsNode) {
        $implements = \array_pop($children);
    }

    if (\end($children) instanceof Node\Stmt\ClassLike\ClassExtendsNode) {
        $extends = \array_pop($children);
    }

    if (\end($children) instanceof Node\Stmt\Template\ParametersListNode) {
        $parameters = \array_pop($children);
    }

    return new Node\Stmt\ClassLike\ClassDefinitionNode(
        $children[0],
        $parameters,
        $methods,
        $extends,
        $implements,
    );
}
  : ::T_CLASS:: Identifier()
    TemplateParameterDefinitions()?
    ClassExtends()?
    InterfaceImplements()?
    (ClassLikeEmptyBody() | ClassLikeBody())
  ;

ClassLikeEmptyBody
  : ::T_SEMICOLON::
  ;

ClassLikeBody -> {
    return new Node\Stmt\Callable\MethodsListNode($children);
}
  : ::T_BRACE_OPEN::
        MethodDefinition()+
    ::T_BRACE_CLOSE::
  ;
