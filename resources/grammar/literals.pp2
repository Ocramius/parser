
Literal
  : StringLiteral()
  | FloatLiteral()
  | IntLiteral()
  | BoolLiteral()
  | NullLiteral()
  | ConstMaskLiteral()
  | ClassConstLiteral()
  ;

VariableLiteral -> {
    return Node\Literal\VariableLiteralNode::parse($token->getValue());
}
  : <T_VARIABLE>
  | <T_THIS>
  ;

StringLiteral -> { return $this->stringPool[$token] ??= $children; }
  : DoubleQuotedStringLiteral()
  | SingleQuotedStringLiteral()
  ;

DoubleQuotedStringLiteral -> {
    return Node\Literal\StringLiteralNode::createFromDoubleQuotedString($token->getValue());
}
  : <T_DQ_STRING_LITERAL>
  ;

SingleQuotedStringLiteral -> {
    return Node\Literal\StringLiteralNode::createFromSingleQuotedString($token->getValue());
}
  : <T_SQ_STRING_LITERAL>
  ;

FloatLiteral -> {
    return Node\Literal\FloatLiteralNode::parse($token->getValue());
}
  : <T_FLOAT_LITERAL>
  ;

IntLiteral -> {
    return $this->integerPool[$token] ??= Node\Literal\IntLiteralNode::parse($token->getValue());
}
  : <T_INT_LITERAL>
  ;

BoolLiteral -> {
    return Node\Literal\BoolLiteralNode::parse($token->getValue());
}
  : <T_BOOL_LITERAL>
  ;

NullLiteral -> {
    return new Node\Literal\NullLiteralNode($children->getValue());
}
  : <T_NULL_LITERAL>
  ;

ConstMaskLiteral -> {
    return new Node\Stmt\ConstMaskNode($children[0]);
}
  : Name() ::T_ASTERISK::
  ;

ClassConstLiteral -> {
    // <ClassName> :: <ConstPrefix> "*"
    if (\count($children) === 3) {
        return new Node\Stmt\ClassConstMaskNode(
            $children[0],
            $children[1],
        );
    }

    // <ClassName> :: <ConstName>
    if ($children[1] instanceof Node\Identifier) {
        return new Node\Stmt\ClassConstNode(
            $children[0],
            $children[1],
        );
    }

    // <ClassName> :: "*"
    return new Node\Stmt\ClassConstMaskNode($children[0]);
}
  : Name() ::T_DOUBLE_COLON::
    ( Identifier() <T_ASTERISK>
    | Identifier()
    | <T_ASTERISK>
    )
  ;
