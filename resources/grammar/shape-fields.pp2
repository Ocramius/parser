
ShapeFields -> {
    if ($children === []) {
        return new Node\Type\Shape\FieldsListNode();
    }

    if (!$children[0] instanceof \ArrayObject) {
        return new Node\Type\Shape\FieldsListNode([], false);
    }

    return new Node\Type\Shape\FieldsListNode(
        $children[0]->getArrayCopy(),
        \count($children) !== 2,
    );
}
  : ::T_BRACE_OPEN::
      ( (ShapeFieldsList() (::T_COMMA:: <T_ELLIPSIS>)? ::T_COMMA::?)
      | <T_ELLIPSIS> ::T_COMMA::? )?
    ::T_BRACE_CLOSE::
  ;

IsSealed -> { return $children === []; }
  : <T_ELLIPSIS>?
  ;

ShapeFieldsList -> {
    return new \ArrayObject($children);
}
  : ShapeField() (::T_COMMA:: ShapeField())*
  ;

ShapeField
  : NamedShapeField()
  ;

NamedShapeField -> {
    if (\is_array($children)) {
        $value = \array_pop($children);
        $field = $children[0] instanceof Node\Literal\IntLiteralNode
            ? new Node\Type\Shape\NumericFieldNode($children[0], $value)
            : new Node\Type\Shape\NamedFieldNode($children[0], $value)
        ;

        // In case of "nullable" suffix defined
        if (\count($children) === 2) {
            return new Node\Type\Shape\OptionalFieldNode($field);
        }

        return $field;
    }

    return $children;
}
  : ShapeKey() (<T_NULLABLE>)? ::T_COLON:: AnonymousShapeField()
  | AnonymousShapeField()
  ;

AnonymousShapeField -> {
    return new Node\Type\Shape\FieldNode($children[0]);
}
  : ShapeValue()
  ;

ShapeKey -> {
    return match(true) {
        $children instanceof Node\Literal\IntLiteralNode,
        $children instanceof Node\Literal\StringLiteralNode => $children,
        $children instanceof Node\Literal\BoolLiteralNode,
        $children instanceof Node\Literal\NullLiteralNode,
            => new Node\Literal\StringLiteralNode($children->raw),
        $children instanceof Node\Identifier
            => new Node\Literal\StringLiteralNode($children->toString()),
        default => new Node\Literal\StringLiteralNode($children->getValue()),
    };
}
  : Identifier()
  | IntLiteral()
  | BoolLiteral()
  | NullLiteral()
  | StringLiteral()
  ;

ShapeValue
  : TypeStatement()
  ;
