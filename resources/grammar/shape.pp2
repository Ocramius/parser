
ShapeFields -> {
    $isSealed = \array_pop($children);

    return new Node\Stmt\Shape\FieldsListNode($children, $isSealed);
}
  : ::T_BRACE_OPEN::
      ShapeField()? (::T_COMMA:: ShapeField())* ::T_COMMA::?
      IsSealed() ::T_COMMA::?
    ::T_BRACE_CLOSE::
  ;

IsSealed -> { return $children === []; }
  : <T_ELLIPSIS>?
  ;

ShapeField
  : NamedShapeField()
  ;

NamedShapeField -> {
    if (\is_array($children)) {
        // In case of "nullable" suffix defined
        if (\count($children) === 3) {
            return new Node\Stmt\Shape\OptionalFieldNode(
                new Node\Stmt\Shape\NamedFieldNode($children[0], $children[2])
            );
        }

        return new Node\Stmt\Shape\NamedFieldNode($children[0], $children[1]);
    }

    return $children;
}
  : ShapeKey() (<T_NULLABLE>)? ::T_COLON:: AnonymousShapeField()
  | AnonymousShapeField()
  ;

AnonymousShapeField -> {
    return new Node\Stmt\Shape\FieldNode($children[0]);
}
  : ShapeValue()
  ;

ShapeKey -> {
    return match(true) {
        $children instanceof Node\Literal\StringLiteralNode => $children,
        $children instanceof Node\Literal\IntLiteralNode,
        $children instanceof Node\Literal\BoolLiteralNode,
        $children instanceof Node\Literal\NullLiteralNode,
            => new Node\Literal\StringLiteralNode($children->raw),
        default => new Node\Literal\StringLiteralNode($children->getValue()),
    };
}
  : Identifier()
  | IntLiteral()
  | BoolLiteral()
  | NullLiteral()
  | StringLiteral()
  ;

ShapeValue
  : Statement()
  ;

