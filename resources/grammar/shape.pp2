
ShapeArguments -> {
    $isSealed = \array_pop($children);

    return new Node\Stmt\Shape\ArgumentsListNode($children, $isSealed);
}
  : ::T_BRACE_OPEN::
      ShapeArgument()? (::T_COMMA:: ShapeArgument())* ::T_COMMA::?
      IsSealed() ::T_COMMA::?
    ::T_BRACE_CLOSE::
  ;

IsSealed -> { return $children === []; }
  : <T_ELLIPSIS>?
  ;

ShapeArgument
  : OptionalNamedShapeArgument()
  | NamedShapeArgument()
  | AnonymousShapeArgument()
  ;

OptionalNamedShapeArgument -> {
    return new Node\Stmt\Shape\ArgumentNode(
        $children[1],
        $children[0],
        true,
    );
}
  : ShapeKey() ::T_NULLABLE:: ::T_COLON:: ShapeValue()
  ;

NamedShapeArgument -> {
    return new Node\Stmt\Shape\ArgumentNode(
        $children[1],
        $children[0],
    );
}
  : ShapeKey() ::T_COLON:: ShapeValue()
  ;

AnonymousShapeArgument -> {
    return new Node\Stmt\Shape\ArgumentNode(
        $children[0],
    );
}
  : ShapeValue()
  ;

ShapeKey -> {
    return match(true) {
        $children instanceof Node\Literal\StringLiteralNode => $children,
        $children instanceof Node\Literal\IntLiteralNode,
        $children instanceof Node\Literal\BoolLiteralNode,
        $children instanceof Node\Literal\NullLiteralNode,
            => new Node\Literal\StringLiteralNode($children->raw),
        default => new Node\Literal\StringLiteralNode($children->getValue()),
    };
}
  : <T_NAME>
  | IntLiteral()
  | BoolLiteral()
  | NullLiteral()
  | StringLiteral()
  ;

ShapeValue
  : Statement()
  ;

