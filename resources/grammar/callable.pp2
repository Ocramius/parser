
CallableTypeStmt -> {
    $name = \array_shift($children);

    $arguments = isset($children[0]) && $children[0] instanceof Node\Stmt\Callable\ArgumentsListNode
        ? \array_shift($children)
        : new Node\Stmt\Callable\ArgumentsListNode();

    return new Node\Stmt\CallableTypeNode(
        name: $name,
        arguments: $arguments,
        type: isset($children[0]) ? $children[0] : null,
    );
}
  : Name()
    ::T_PARENTHESIS_OPEN::
        CallableArguments()?
    ::T_PARENTHESIS_CLOSE::
    CallableReturnType()?
  ;

CallableArguments -> {
    return new Node\Stmt\Callable\ArgumentsListNode($children);
}
  : NamedCallableArgument() (::T_COMMA:: NamedCallableArgument())* ::T_COMMA::?
  ;

NamedCallableArgument -> {
    if (\count($children) === 1) {
        return $children[0];
    }

    return new Node\Stmt\Callable\NamedArgumentNode($children[1], $children[0]);
}
  : OutputCallableArgument() VariableLiteral()?
  ;

OutputCallableArgument -> {
    if (\count($children) === 1) {
        return $children[0];
    }

    return new Node\Stmt\Callable\OutArgumentNode($children[0]);
}
  : PrefixedVariadicCallableArgument() <T_AMP>?
  ;

PrefixedVariadicCallableArgument -> {
    if (\is_array($children)) {
        return new Node\Stmt\Callable\VariadicArgumentNode(
            new Node\Stmt\Callable\ArgumentNode($children[1]),
        );
    }

    return $children;
}
  : <T_ELLIPSIS> Statement()
  | VariadicOrOptionalCallableArgument()
  ;

VariadicOrOptionalCallableArgument -> {
    $argument = new Node\Stmt\Callable\ArgumentNode($children[0]);

    if (!isset($children[1])) {
        return $argument;
    }

    if ($children[1]->getName() === 'T_EQ') {
        return new Node\Stmt\Callable\OptionalArgumentNode($argument);
    }

    return new Node\Stmt\Callable\VariadicArgumentNode($argument);
}
  : Statement() (<T_EQ> | <T_ELLIPSIS>)?
  ;

CallableReturnType
  : ::T_COLON:: Statement()
  ;
