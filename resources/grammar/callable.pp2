
CallableType -> {
    $name = \array_shift($children);

    if ($this->callables === false) {
        throw FeatureNotAllowedException::fromFeature('callable types', $offset);
    }

    $parameters = isset($children[0]) && $children[0] instanceof Node\Stmt\Callable\ParametersListNode
        ? \array_shift($children)
        : new Node\Stmt\Callable\ParametersListNode();

    return new Node\Stmt\CallableTypeNode(
        name: $name,
        parameters: $parameters,
        type: isset($children[0]) ? $children[0] : null,
    );
}
  : Name()
    ::T_PARENTHESIS_OPEN::
        CallableParameters()?
    ::T_PARENTHESIS_CLOSE::
    CallableReturnType()?
  ;

CallableParameters -> {
    return new Node\Stmt\Callable\ParametersListNode($children);
}
  : OptionalCallableParameter() (::T_COMMA:: OptionalCallableParameter())* ::T_COMMA::?
  ;

OptionalCallableParameter -> {
    if (!isset($children[1])) {
        return $children[0];
    }

    if ($children[0]->variadic) {
        throw new SemanticException(
            'Cannot have variadic param with a default',
            $offset,
            SemanticException::CODE_VARIADIC_WITH_DEFAULT,
        );
    }

    $children[0]->optional = true;
    return $children[0];
}
  : NamedCallableParameter() <T_ASSIGN>?
  ;

NamedCallableParameter -> {
    if (\count($children) === 1) {
        return $children[0];
    }

    $children[0]->name = $children[1];
    return $children[0];
}
  : VariadicCallableParameter() VariableLiteral()?
  ;

VariadicCallableParameter -> {
    if (!isset($children[1])) {
        return $children[0];
    }

    if ($children[0] instanceof Node\Stmt\Callable\ParameterNode) {
        $children[0]->variadic = true;
        return $children[0];
    }

    $children[1]->variadic = true;
    return $children[1];
}
  : <T_ELLIPSIS> OutputCallableParameter()   // Prefixed variadic argument (Psalm format)
  | OutputCallableParameter() <T_ELLIPSIS>?  // Suffixed variadic argument (PhpStan + Psalm)
  ;

OutputCallableParameter -> {
    $argument = new Node\Stmt\Callable\ParameterNode($children[0]);

    if (\count($children) !== 1) {
        $argument->output = true;
    }

    return $argument;
}
  : Type() <T_AMP>?
  ;

CallableReturnType
  : ::T_COLON:: Type()
  ;
