
%token  T_STRING_LITERAL        (L?)"([^"\\]*(?:\\.[^"\\]*)*)"
%token  T_FLOAT_LITERAL         \-?(?:[1-9]\d*|[0-9])\.(?:[1-9]\d*|[0-9])
%token  T_INT_LITERAL           \-?[1-9]\d*|[0-9]
%token  T_BOOL_LITERAL          \b(?i)(?:true|false)\b
%token  T_NULL_LITERAL          \b(?i)(?:null)\b
%token  T_NAME                  [a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*

%token  T_ANGLE_BRACKET_OPEN    <
%token  T_ANGLE_BRACKET_CLOSE   >
%token  T_BRACE_OPEN            \{
%token  T_BRACE_CLOSE           \}
%token  T_COMMA                 ,
%token  T_DOUBLE_COLON          ::
%token  T_COLON                 :
%token  T_NS_DELIMITER          \\
%token  T_NULLABLE              \?

%skip   T_WHITESPACE            \s+
%skip   T_BLOCK_COMMENT         \h*/\*.*?\*/\h*

%pragma root                    NullableTypeStmt

Name -> { return Node\Name::parse($children); }
  : ::T_NS_DELIMITER::? <T_NAME> (::T_NS_DELIMITER:: <T_NAME>)*
  ;

NullableTypeStmt -> {
    if (\count($children) > 1) {
        return Node\Stmt\NullableTypeStmt::fromTypeStmt($children[0]);
    }

    return $children[0];
}
  : TypeStmt() <T_NULLABLE>?
  ;

TypeStmt -> {
    return new Node\Stmt\TypeStmt(
        offset: $offset,
        name: $children[0],
        args: $children[1] ?? [],
    );
}
  : Name() (TypeStmtArgs() | TypeStmtNamedArgs())?
  ;

TypeStmtNamedArgs -> { return new \ArrayObject($children); }
  : ::T_BRACE_OPEN::
      TypeStmtNamedArg() (::T_COMMA:: TypeStmtNamedArg())*
    ::T_BRACE_CLOSE::
  ;

TypeStmtNamedArg -> { return new Node\NamedArgument($offset, $children[0]->getValue(), $children[1]); }
  : <T_NAME> ::T_COLON:: TypeStmtArg()
  ;

TypeStmtArgs -> { return new \ArrayObject($children); }
  : ::T_ANGLE_BRACKET_OPEN::
      TypeStmtArg() (::T_COMMA:: TypeStmtArg())*
    ::T_ANGLE_BRACKET_CLOSE::
  ;

TypeStmtArg -> { return new Node\Argument($offset, $children); }
  : Literal()
  | NullableTypeStmt()
  ;

Literal
  : StringLiteral()
  | FloatLiteral()
  | IntLiteral()
  | BoolLiteral()
  | NullLiteral()
  | ClassConstLiteral()
  ;

StringLiteral -> { return Node\Literal\StringLiteral::parse($token); }
  : <T_STRING_LITERAL>
  ;

FloatLiteral -> { return Node\Literal\FloatLiteral::parse($token); }
  : <T_FLOAT_LITERAL>
  ;

IntLiteral -> { return Node\Literal\IntLiteral::parse($token); }
  : <T_INT_LITERAL>
  ;

BoolLiteral -> { return Node\Literal\BoolLiteral::parse($token); }
  : <T_BOOL_LITERAL>
  ;

NullLiteral -> { return Node\Literal\NullLiteral::parse($token); }
  : <T_NULL_LITERAL>
  ;

ClassConstLiteral -> { return Node\Literal\ClassConstLiteral::parse($children[0], $children[1]); }
  : Name() ::T_DOUBLE_COLON:: <T_NAME>
  ;
